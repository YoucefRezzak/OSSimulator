import java.util.*;
public class NewJFrame2 extends javax.swing.JFrame {
    Memoire m;
    File f;
    ArrayList<Processus> MesProcessus;
    ArrayList<Processus> arrive;
    ArrayList<Integer> exec;
    ArrayList<Integer> cal;
    boolean Processeur=true,ES=true;
    File entre=new Fifo();
    int temps=-1,tc=1;
    Processus P,E;
    
    public NewJFrame2(Memoire m, File f,ArrayList M) {
        initComponents();
        this.setVisible(true);
        this.m=m;
        this.f=f;
        this.MesProcessus=M;
        this.jLabel12.setVisible(false);
        this.arrive=new ArrayList ();
        this.exec=new ArrayList();
        this.cal=new ArrayList();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Temps+1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel2.setText("Temps : ");

        jLabel3.setText("File d'attente : ");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel4.setText("Le processeur contient : ");

        jLabel5.setText("Memoire : (exemple : [debut ;identifiant; fin]  pour prise et [debut;fin]pour libre)");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel7.setText("Entrée sortie contient : ");

        jLabel8.setText("File d'attente Entrée sortie : ");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel10.setText("Arrivé mais pas en mémoire : ");

        jLabel12.setText("TC=     .  Q=    ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(90, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(40, 40, 40))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        temps++;
        boolean a;
        int i=0;
        
//        m.vider(f,E,P);
//        m.vider(entre,E,P);
        
        this.jLabel2.setText("Temps : "+temps);
        this.jLabel1.setText(f.ecrire());
        this.jLabel6.setText(m.ecrire()); 
        this.jLabel9.setText(this.entre.ecrire());
        this.jLabel11.setText(this.ecrire());
        this.jLabel12.setText("Tc="+tc+". Q="+f.Q);
        if(P!=null){
            this.jLabel4.setText("Le processeur contient : "+P.identifiant);
        }
        if(E!=null){
            this.jLabel7.setText("L'entré sortie contient : "+E.identifiant);
        }
        // FIFO FIFO FIFO ou TCP TCP TCP
        if((f.toString().equals("FIFO"))||(f.toString().equals("TCP"))){
            if(P!=null){
                if((P.tempsRestant()==0)){
                        
                        this.exec.add(P.tempsEx);
                        this.cal.add(P.tempsDeCalcule);
                        m.supprimer(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                    }
                else{
                    if(P.t<P.Tranches.get(P.i)){
                        P.t++;
                    }
                    else{
                        P.i++;
                        P.t=0;
                        entre.enfiler(P);
                        P=null;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                        Processeur=true;                  
                    }
                }
            }
            if(E!=null){
                if(E.tempsRestant()==0){
                        this.exec.add(E.tempsEx);
                        this.cal.add(E.tempsDeCalcule);
                        m.supprimer(E);
                        E=null;
                        ES=true;
                        this.jLabel7.setText("L'entré sortie contient : RIEN");
                    }
                else{
                    if(E.t<E.Tranches.get(E.i)){
                        E.t++;
                    }
                    else{
                        E.t=0;
                        E.i++;
                        f.enfiler(E);
                        E=null;
                        this.jLabel7.setText("L'entré sortie contient : RIEN");
                        ES=true;
                    }
                }
            }
            i=0;
            if(!arrive.isEmpty()){
                a=false;
                while((!a)&&(i<arrive.size())){
                    a=this.m.ajouter(this.arrive.get(i));
                    if(!a){
                        i++;
                    }
                }
                if(a){
                    this.f.enfiler(this.arrive.get(i));
                    this.jLabel1.setText(f.ecrire());
                    this.arrive.remove(i);
                }
            }
                if(!this.MesProcessus.isEmpty()){
                    if(this.MesProcessus.get(0).tempsDariver==temps){
                        a=this.m.ajouter(this.MesProcessus.get(0));
                        if(a){
                            System.out.print("3em !");
                            this.f.enfiler(this.MesProcessus.get(0));
                            this.jLabel1.setText(f.ecrire());
                            this.MesProcessus.remove(0);
                        }
                        else{
                            arrive.add(MesProcessus.get(0));
                            this.MesProcessus.remove(0);
                        }
                    }
                }
            
            
                if(!this.f.file.isEmpty()){
                    if(Processeur){
                        P=this.f.file.get(0);
                        f.defiler();
                        P.t=0;
                        this.jLabel4.setText("Le processeur contient : "+P.identifiant);
                        Processeur=false;
                    }
                }
                if(!entre.file.isEmpty()){
                    if(ES){
                        E=this.entre.file.get(0);
                        entre.defiler();
                        E.t=0;
                        this.jLabel7.setText("L'entrée sortie contient : "+E.identifiant);
                        ES=false;
                    }
                }
                
        }
        
        // ROUND ROBIN ROUND ROBIN ROUND ROBIN 
        if(f.toString().equals("RR")){
            this.jLabel12.setVisible(true);
            this.jLabel12.setText("Tc="+tc+". Q="+f.Q);
            if(E!=null){
                if(E.tempsRestant()==0){
                        this.exec.add(E.tempsEx);
                        this.cal.add(E.tempsDeCalcule);
                        m.supprimer(E);
                        E=null;
                        ES=true;
                        this.jLabel7.setText("L'entré sorti contient : RIEN");
                    }
                else{
                if(E.t<E.Tranches.get(E.i)){
                    E.t++;
                }
                else{
                    if(E.i>=E.Tranches.size()){
                        E.t=0;
                        f.enfiler(E);
                    }
                    else{
                        this.exec.add(E.tempsEx);
                        this.cal.add(E.tempsDeCalcule);
                        m.supprimer(E);
                        
                    }
                    E=null;
                    this.jLabel7.setText("L'entré sorti contient : RIEN");
                    ES=true;
                }
                }
            }
            if(P!=null){
                if(P.tempsRestant()==0){
                        this.exec.add(P.tempsEx);
                        this.cal.add(P.tempsDeCalcule);
                        m.supprimer(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                    }
                else{
                if(tc==f.Q){
                    if(P.t==P.Tranches.get(i)){
                        P.t=0;
                        entre.enfiler(P);
                        
                    }
                    else{
                        f.enfiler(P);
                    }
                    tc=0;
                    P=null;
                    Processeur=true;
                    this.jLabel4.setText("Le processeur contient : RIEN");
                }
                
                else{
                    if(P.t==P.Tranches.get(i)){
                        entre.enfiler(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                    }
                    else{
                        tc++;
                        P.t++;
                    }
                }
                }
            }
            if(!arrive.isEmpty()){
                a=false;
                i=0;
                while((!a)&&(i<arrive.size())){
                    a=this.m.ajouter(this.arrive.get(i));
                    if(!a){
                        i++;
                    }
                }
                if(a){
                    this.f.enfiler(this.arrive.get(i));
                    this.jLabel1.setText(f.ecrire());
                    this.arrive.remove(i);
                    
                }
            }
                if(!this.MesProcessus.isEmpty()){
                    System.out.print("pas empty");
                    if(this.MesProcessus.get(0).tempsDariver==temps){
                        System.out.print("\n premier !");
                        a=this.m.ajouter(this.MesProcessus.get(0));
                        System.out.print("2em !");
                        if(a){
                            System.out.print("3em !");
                            this.f.enfiler(this.MesProcessus.get(0));
                            this.jLabel1.setText(f.ecrire());
                            this.MesProcessus.remove(0);
                        }
                        else{
                            arrive.add(MesProcessus.get(0));
                            this.MesProcessus.remove(0);
                        }
                    }
                }
                if((Processeur)||(ES)){
                    if(!this.f.file.isEmpty()){
                        if((Processeur)){
                            P=this.f.file.get(0);
                            f.defiler();
                            tc=1;
                            this.jLabel4.setText("Le processeur contient : "+P.identifiant);
                            Processeur=false;
                        }
                    }
                    if(!entre.file.isEmpty()){
                         if((ES)){
                            E=this.entre.file.get(0);
                            E.t=0;
                            entre.defiler();
                            this.jLabel7.setText("L'entrée sortie contient : "+E.identifiant);
                            ES=false;
                        }
                    }
                }
        }
        
        //TRC TRC TRC
        if(f.toString().equals("TRC")){
            if(E!=null){
                if(E.tempsRestant()==0){
                        this.exec.add(E.tempsEx);
                        this.cal.add(E.tempsDeCalcule);
                        m.supprimer(E);
                        E=null;
                        ES=true;
                        this.jLabel7.setText("L'entré sortie contient : RIEN");
                    }
                else{
                    if(E.t<E.Tranches.get(E.i)){
                        E.t++;
                    }
                    else{
                        E.t=0;
                        E.i++;
                        f.enfiler(E);
                        E=null;
                        this.jLabel7.setText("L'entré sortie contient : RIEN");
                        ES=true;
                    }
                }
            }
            if(P!=null){
                if(P.tempsRestant()==0){
                        this.exec.add(P.tempsEx);
                        this.cal.add(P.tempsDeCalcule);
                        m.supprimer(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                    }
                else{
                if(P.tempsRestant()>f.file.get(0).tempsRestant()){
                    if(P.t==P.Tranches.get(i)){
                        P.t=0;
                        entre.enfiler(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                
                    }
                    else{
                        f.enfiler(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                    }
                    
                }
                else{
                    if(P.t==P.Tranches.get(i)){
                        P.t=0;
                        entre.enfiler(P);
                        P=null;
                        Processeur=true;
                        this.jLabel4.setText("Le processeur contient : RIEN");
                
                    }
                    else{
                        P.t++;
                    }
                }
            }
            if(!arrive.isEmpty()){
                a=false; i=0;
                while((!a)&&(i<arrive.size())){
                    a=this.m.ajouter(this.arrive.get(i));
                    if(!a){
                        i++;
                    }
                }
                if(a){
                    this.f.enfiler(this.arrive.get(i));
                    this.jLabel1.setText(f.ecrire());
                    this.arrive.remove(i);
                    
                }
            }
                if(!this.MesProcessus.isEmpty()){
                    System.out.print("pas empty");
                    if(this.MesProcessus.get(0).tempsDariver==temps){
                        System.out.print("\n premier !");
                        a=this.m.ajouter(this.MesProcessus.get(0));
                        System.out.print("2em !");
                        if(a){
                            System.out.print("3em !");
                            this.f.enfiler(this.MesProcessus.get(0));
                            this.jLabel1.setText(f.ecrire());
                            this.MesProcessus.remove(0);
                        }
                        else{
                            arrive.add(MesProcessus.get(0));
                            this.MesProcessus.remove(0);
                        }
                    }
                }
                if((Processeur)||(ES)){
                    if(!this.f.file.isEmpty()){
                        if((Processeur)){
                            P=this.f.file.get(0);
                            f.defiler();
                            
                            this.jLabel4.setText("Le processeur contient : "+P.identifiant);
                            Processeur=false;
                        }
                    }
                    if(!entre.file.isEmpty()){
                         if((ES)){
                            E=this.entre.file.get(0);
                            entre.defiler();
                            this.jLabel7.setText("L'entrée sortie contient : "+E.identifiant);
                            ES=false;
                        }
                    }
                }
        }
        }
        augmenter();
    this.jLabel1.setText(f.ecrire());  
    this.jLabel6.setText(m.ecrire());
    this.jLabel9.setText(entre.ecrire());
    this.jLabel2.setText("Temps : "+temps);
        this.jLabel1.setText(f.ecrire());
        this.jLabel6.setText(m.ecrire()); 
        this.jLabel9.setText(this.entre.ecrire());
        this.jLabel11.setText(this.ecrire());
        if(P!=null){
            this.jLabel4.setText("Le processeur contient : "+P.identifiant);
        }
        if(E!=null){
            this.jLabel7.setText("L'entré sortie contient : "+E.identifiant);
        }
    if((MesProcessus.isEmpty())&&(f.file.isEmpty())&&(Processeur)&&(ES)&&(entre.file.isEmpty())&&(P==null)&&(E==null)){
        this.jButton1.setText("FIN");
        this.jLabel2.setText("Temps : "+temps);
        this.jLabel1.setText(f.ecrire());
        this.jLabel6.setText(m.ecrire()); 
        this.jLabel9.setText(this.entre.ecrire());
        this.jLabel11.setText(this.ecrire());
        this.setVisible(false);
        new NewJFrame3(this.exec,this.cal).setVisible(true);
        if(P!=null){
            this.jLabel4.setText("Le processeur contient : "+P.identifiant);
        }
        if(E!=null){
            this.jLabel7.setText("L'entré sortie contient : "+E.identifiant);
        }
    }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    public void augmenter(){
        if(this.E!=null){
            E.tempsEx++;
        }
        if(this.P!=null){
            P.tempsEx++;
        }
        if(!f.file.isEmpty()){
            for(int i=0;i<f.file.size();i++){
                f.file.get(i).tempsEx++;
            }
        }
        if(!entre.file.isEmpty()){
            for(int i=0;i<f.file.size();i++){
                entre.file.get(i).tempsEx++;
            }
        }
    }
    public  String ecrire(){
            String s="";
            if(arrive.isEmpty()){
                 return s;
            }
            for(int i=0;i<arrive.size();i++){
                 s=s+arrive.get(i).identifiant+" ,";
            }
            return s;
     }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
